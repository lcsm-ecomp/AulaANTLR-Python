# Generated from Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,84,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
        8,4,8,61,8,8,11,8,12,8,62,1,9,4,9,66,8,9,11,9,12,9,67,1,10,1,10,
        1,11,1,11,1,12,1,12,1,13,1,13,1,14,4,14,79,8,14,11,14,12,14,80,1,
        14,1,14,0,0,15,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,1,0,5,1,0,48,57,1,0,97,122,2,0,43,43,
        45,45,2,0,42,42,47,47,3,0,9,10,13,13,32,32,86,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,31,1,0,0,0,3,33,1,0,
        0,0,5,35,1,0,0,0,7,38,1,0,0,0,9,41,1,0,0,0,11,45,1,0,0,0,13,49,1,
        0,0,0,15,53,1,0,0,0,17,60,1,0,0,0,19,65,1,0,0,0,21,69,1,0,0,0,23,
        71,1,0,0,0,25,73,1,0,0,0,27,75,1,0,0,0,29,78,1,0,0,0,31,32,5,59,
        0,0,32,2,1,0,0,0,33,34,5,61,0,0,34,4,1,0,0,0,35,36,5,116,0,0,36,
        37,5,111,0,0,37,6,1,0,0,0,38,39,5,100,0,0,39,40,5,111,0,0,40,8,1,
        0,0,0,41,42,5,101,0,0,42,43,5,110,0,0,43,44,5,100,0,0,44,10,1,0,
        0,0,45,46,5,102,0,0,46,47,5,111,0,0,47,48,5,114,0,0,48,12,1,0,0,
        0,49,50,5,118,0,0,50,51,5,97,0,0,51,52,5,114,0,0,52,14,1,0,0,0,53,
        54,5,112,0,0,54,55,5,114,0,0,55,56,5,105,0,0,56,57,5,110,0,0,57,
        58,5,116,0,0,58,16,1,0,0,0,59,61,7,0,0,0,60,59,1,0,0,0,61,62,1,0,
        0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,18,1,0,0,0,64,66,7,1,0,0,65,64,
        1,0,0,0,66,67,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,20,1,0,0,0,
        69,70,7,2,0,0,70,22,1,0,0,0,71,72,7,3,0,0,72,24,1,0,0,0,73,74,5,
        40,0,0,74,26,1,0,0,0,75,76,5,41,0,0,76,28,1,0,0,0,77,79,7,4,0,0,
        78,77,1,0,0,0,79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,82,1,
        0,0,0,82,83,6,14,0,0,83,30,1,0,0,0,4,0,62,67,80,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    FOR = 6
    VAR = 7
    PRINT = 8
    NUM = 9
    ID = 10
    OP1 = 11
    OP2 = 12
    AP = 13
    FP = 14
    SPACE = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'='", "'to'", "'do'", "'end'", "'for'", "'var'", "'print'", 
            "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "FOR", "VAR", "PRINT", "NUM", "ID", "OP1", "OP2", "AP", "FP", 
            "SPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "FOR", "VAR", 
                  "PRINT", "NUM", "ID", "OP1", "OP2", "AP", "FP", "SPACE" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


